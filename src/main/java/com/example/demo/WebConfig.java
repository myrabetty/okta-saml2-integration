package com.example.demo;

import org.apache.log4j.Logger;
import org.opensaml.core.xml.XMLObject;
import org.opensaml.core.xml.schema.impl.XSStringImpl;
import org.opensaml.saml.saml2.core.Assertion;
import org.opensaml.saml.saml2.core.Attribute;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.io.Resource;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.config.annotation.ObjectPostProcessor;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.annotation.web.configurers.saml2.Saml2LoginConfigurer;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.saml2.credentials.Saml2X509Credential;
import org.springframework.security.saml2.provider.service.authentication.OpenSamlAuthenticationProvider;
import org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration;
import org.springframework.security.saml2.provider.service.servlet.filter.Saml2WebSsoAuthenticationFilter;

import java.io.FileInputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.UnrecoverableEntryException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Collection;
import java.util.List;
import java.util.stream.Collectors;

import static org.springframework.security.saml2.credentials.Saml2X509Credential.Saml2X509CredentialType.DECRYPTION;
import static org.springframework.security.saml2.credentials.Saml2X509Credential.Saml2X509CredentialType.SIGNING;
import static org.springframework.security.saml2.credentials.Saml2X509Credential.Saml2X509CredentialType.VERIFICATION;

@EnableWebSecurity(debug = true)
class WebConfig extends WebSecurityConfigurerAdapter {

    @Autowired
    Saml2Properties saml2RelyingPartyProperties;

    Logger logger = Logger.getLogger(this.getClass().getSimpleName());

    RelyingPartyRegistration getSaml2AuthenticationConfiguration() {

        //base Url
        String baseUrl = "localhost:8080/login";
        //local registration ID
        String registrationId = "simplesamlphp";
        //remote IDP entity ID
        String idpEntityId = saml2RelyingPartyProperties.getIdentityProvider().getEntityId();
        //remote WebSSO Endpoint - Where to Send AuthNRequests to
        String webSsoEndpoint = saml2RelyingPartyProperties.getIdentityProvider().getSsoUrl();

        //local entity ID - autogenerated based on URL
        String localEntityIdTemplate = "{registrationId}";
        //local signing (and decryption key)
        Saml2X509Credential signingCredential = getSigningCredentials();
        //IDP certificate for verification of incoming messages
        Saml2X509Credential idpVerificationCertificate = getVerificationCertificate();
        String acsUrlTemplate = "{baseUrl}" + Saml2WebSsoAuthenticationFilter.DEFAULT_FILTER_PROCESSES_URI;
        return RelyingPartyRegistration.withRegistrationId(registrationId)
                .remoteIdpEntityId(idpEntityId)
                .idpWebSsoUrl(webSsoEndpoint)
                .credentials(c -> c.add(signingCredential))
                .credentials(c -> c.add(idpVerificationCertificate))
                .localEntityIdTemplate(localEntityIdTemplate)
                .assertionConsumerServiceUrlTemplate(acsUrlTemplate)
                .build();
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        // @formatter:off
        final Saml2LoginConfigurer<HttpSecurity> saml2LoginConfigurer = http
                .authorizeRequests()
                .anyRequest().authenticated()
                .and()
                .saml2Login();
        saml2LoginConfigurer.relyingPartyRegistrationRepository(
                        new InMemoryRelyingPartyRegistrationRepository(
                                getSaml2AuthenticationConfiguration()
                        )
                )
                .loginProcessingUrl(Saml2WebSsoAuthenticationFilter.DEFAULT_FILTER_PROCESSES_URI);

        ObjectPostProcessor<? extends AuthenticationProvider> converter = new GrantedAuthorityPostProcessor();
        saml2LoginConfigurer.addObjectPostProcessor(converter);
        // @formatter:on
    }

    public static class GrantedAuthorityPostProcessor implements ObjectPostProcessor<AuthenticationProvider> {

        private Converter<Assertion, Collection<? extends GrantedAuthority>> authoritiesExtractor =
                (a -> converter(a));

        public <O extends AuthenticationProvider> O postProcess(O object) {
            if (object instanceof OpenSamlAuthenticationProvider) {
                ((OpenSamlAuthenticationProvider) object).setAuthoritiesExtractor(authoritiesExtractor);
            }
            return object;
        }

        public List<GrantedAuthority> converter(Assertion assertion) {
            final List<Attribute> attributes = assertion.getAttributeStatements().get(0).getAttributes();
            final List<Attribute> groups = attributes.stream().filter(x -> x.getName().equals("groups")).collect(Collectors.toList());
            return groups.get(0).getAttributeValues().stream().map(this::newAuthority).collect(Collectors.toList());
        }

        private SimpleGrantedAuthority newAuthority(XMLObject y) {
            final String value = ((XSStringImpl) y).getValue();
            return new SimpleGrantedAuthority(value);
        }
    }

    private Saml2X509Credential getVerificationCertificate() {
        try {

            Saml2Properties.Jks jks = saml2RelyingPartyProperties.getIdentityProvider().getVerification().getJks();
            KeyStore keyStore = getKeyStore(jks);
            X509Certificate certificate = (X509Certificate) keyStore.getCertificate(jks.getKeyStoreAlias());

            return new Saml2X509Credential(
                    certificate,
                    VERIFICATION
            );

        } catch (KeyStoreException | IOException | CertificateException | NoSuchAlgorithmException ex) {
            throw new RuntimeException(ex);
        }
    }

    private Saml2X509Credential getSigningCredentials() {
        //JKS file location.
        try {
            final Saml2Properties.Jks jks = saml2RelyingPartyProperties.getSigning().getJks();
            KeyStore keyStore = getKeyStore(jks);

            KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) keyStore.getEntry(jks.getKeyStoreAlias(),
                    new KeyStore.PasswordProtection(jks.getKeyStorePassword().toCharArray()));

            PrivateKey pk = pkEntry.getPrivateKey();

            // Load certificate chain
            X509Certificate certificate = (X509Certificate) keyStore.getCertificateChain(jks.getKeyStoreAlias())[0];

            return new Saml2X509Credential(pk, certificate, SIGNING, DECRYPTION);
        } catch (KeyStoreException | IOException | CertificateException | NoSuchAlgorithmException | UnrecoverableEntryException ex) {
            throw new RuntimeException(ex);
        }
    }

    // Provide location of Java Keystore and password for access
    private KeyStore getKeyStore (Saml2Properties.Jks jks) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {
        final Resource keyStoreLocation = jks.getKeyStoreLocation();
        String keyStorePassword = jks.getKeyStorePassword();

        KeyStore keyStore = KeyStore.getInstance("JKS");

        try (FileInputStream inputStream = new FileInputStream(keyStoreLocation.getFile())) {
            keyStore.load(inputStream, keyStorePassword.toCharArray());
        }
        return keyStore;

    }
}
