package com.example.demo;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.config.annotation.ObjectPostProcessor;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.annotation.web.configurers.saml2.Saml2LoginConfigurer;
import org.springframework.security.saml2.credentials.Saml2X509Credential;
import org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration;
import org.springframework.security.saml2.provider.service.servlet.filter.Saml2WebSsoAuthenticationFilter;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;

import java.io.FileInputStream;
import java.io.IOException;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.UnrecoverableEntryException;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import static org.springframework.security.saml2.credentials.Saml2X509Credential.Saml2X509CredentialType.DECRYPTION;
import static org.springframework.security.saml2.credentials.Saml2X509Credential.Saml2X509CredentialType.SIGNING;
import static org.springframework.security.saml2.credentials.Saml2X509Credential.Saml2X509CredentialType.VERIFICATION;

@EnableWebSecurity(debug = true)
class WebConfig extends WebSecurityConfigurerAdapter {

    @Autowired
    Saml2Properties saml2RelyingPartyProperties;

    @Value("${app.base-url}")
    private String baseUrl;


    private static final Logger LOGGER = Logger.getLogger(WebConfig.class);

    RelyingPartyRegistration getSaml2AuthenticationConfiguration() {

        //local registration ID
        String registrationId = saml2RelyingPartyProperties.getAudienceUri();
        //remote IDP entity ID
        String idpEntityId = saml2RelyingPartyProperties.getIdentityProvider().getEntityId();
        //remote WebSSO Endpoint - Where to Send AuthNRequests to
        String webSsoEndpoint = saml2RelyingPartyProperties.getIdentityProvider().getSsoUrl();

        //local entity ID - autogenerated based on URL
        String localEntityIdTemplate = "{registrationId}";
        //local signing (and decryption key)
        Saml2X509Credential signingCredential = getSigningCredentials();
        //IDP certificate for verification of incoming messages
        Saml2X509Credential idpVerificationCertificate = getVerificationCertificate();
        String acsUrlTemplate = "{baseUrl}" + Saml2WebSsoAuthenticationFilter.DEFAULT_FILTER_PROCESSES_URI;
        return RelyingPartyRegistration.withRegistrationId(registrationId)
                .remoteIdpEntityId(idpEntityId)
                .idpWebSsoUrl(webSsoEndpoint)
                .credentials(c -> c.add(signingCredential))
                .credentials(c -> c.add(idpVerificationCertificate))
                .localEntityIdTemplate(localEntityIdTemplate)
                .assertionConsumerServiceUrlTemplate(acsUrlTemplate)
                .build();
    }


    @Override
    protected void configure(HttpSecurity http) throws Exception {
        /* this is actually not needed as the Saml2LoginConfigurer calls a CsrfConfigurer to exclude the POST landing uri
        from the resources that need to be filtered. However if by any chance there is a misconfiguration one might want to
        remove csrf for debugging purposes.
        Note that the POST from OKTA which happens on the following URI:
        String disableCsrfOn = Saml2WebSsoAuthenticationFilter.DEFAULT_FILTER_PROCESSES_URI + "/" + saml2RelyingPartyProperties.getAudienceUri();
        http.csrf().ignoringAntMatchers(disableCsrfOn);*/

        http.logout()
                .logoutUrl("/logout")
                .logoutSuccessUrl("/login")
                .invalidateHttpSession(true)
                .deleteCookies("JSESSIONID");

        // @formatter:off
        final Saml2LoginConfigurer<HttpSecurity> saml2LoginConfigurer = http
                .authorizeRequests()
                .antMatchers("/error").permitAll()
                .antMatchers("favicon.ico").permitAll()
                .anyRequest().authenticated()
                .and()
                .saml2Login();
        saml2LoginConfigurer.relyingPartyRegistrationRepository(
                new InMemoryRelyingPartyRegistrationRepository(
                        getSaml2AuthenticationConfiguration()
                )
        )
                .loginProcessingUrl(Saml2WebSsoAuthenticationFilter.DEFAULT_FILTER_PROCESSES_URI)
                .failureHandler(new SimpleUrlAuthenticationFailureHandler());

        // adding custom assertion post processor
        LOGGER.info("Adding custom assertion Post-Processor");
        ObjectPostProcessor<? extends AuthenticationProvider> converter = new GrantedAuthorityPostProcessor();
        saml2LoginConfigurer.addObjectPostProcessor(converter);
        // @formatter:on
    }

    private Saml2X509Credential getVerificationCertificate() {
        try {

            Saml2Properties.Jks jks = saml2RelyingPartyProperties.getIdentityProvider().getVerification().getJks();
            KeyStore keyStore = getKeyStore(jks);
            X509Certificate certificate = (X509Certificate) keyStore.getCertificate(jks.getKeyStoreAlias());

            return new Saml2X509Credential(
                    certificate,
                    VERIFICATION
            );

        } catch (KeyStoreException | IOException | CertificateException | NoSuchAlgorithmException ex) {
            throw new RuntimeException(ex);
        }
    }

    private Saml2X509Credential getSigningCredentials() {
        //JKS file location.
        try {
            final Saml2Properties.Jks jks = saml2RelyingPartyProperties.getSigning().getJks();
            KeyStore keyStore = getKeyStore(jks);

            KeyStore.PrivateKeyEntry pkEntry = (KeyStore.PrivateKeyEntry) keyStore.getEntry(jks.getKeyStoreAlias(),
                    new KeyStore.PasswordProtection(jks.getKeyStorePassword().toCharArray()));

            PrivateKey pk = pkEntry.getPrivateKey();

            // Load certificate chain
            X509Certificate certificate = (X509Certificate) keyStore.getCertificateChain(jks.getKeyStoreAlias())[0];

            return new Saml2X509Credential(pk, certificate, SIGNING, DECRYPTION);
        } catch (KeyStoreException | IOException | CertificateException | NoSuchAlgorithmException | UnrecoverableEntryException ex) {
            throw new RuntimeException(ex);
        }
    }

    // Provide location of Java Keystore and password for access
    private KeyStore getKeyStore(Saml2Properties.Jks jks) throws KeyStoreException, IOException, CertificateException, NoSuchAlgorithmException {
        final Resource keyStoreLocation = jks.getKeyStoreLocation();
        String keyStorePassword = jks.getKeyStorePassword();

        KeyStore keyStore = KeyStore.getInstance("JKS");

        try (FileInputStream inputStream = new FileInputStream(keyStoreLocation.getFile())) {
            keyStore.load(inputStream, keyStorePassword.toCharArray());
        }
        return keyStore;

    }
}
