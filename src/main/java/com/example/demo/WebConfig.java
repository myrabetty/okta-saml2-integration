package com.example.demo;

import org.apache.log4j.Logger;
import org.opensaml.core.xml.XMLObject;
import org.opensaml.core.xml.io.Unmarshaller;
import org.opensaml.core.xml.io.UnmarshallerFactory;
import org.opensaml.core.xml.io.UnmarshallingException;
import org.opensaml.core.xml.schema.impl.XSStringImpl;
import org.opensaml.saml.saml2.core.Attribute;
import org.opensaml.saml.saml2.core.Response;
import org.opensaml.xml.parse.BasicParserPool;
import org.opensaml.xml.parse.XMLParserException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.converter.RsaKeyConverters;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.saml2.credentials.Saml2X509Credential;
import org.springframework.security.saml2.provider.service.registration.InMemoryRelyingPartyRegistrationRepository;
import org.springframework.security.saml2.provider.service.registration.RelyingPartyRegistration;
import org.springframework.security.saml2.provider.service.servlet.filter.Saml2WebSsoAuthenticationFilter;
import org.springframework.util.FileCopyUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import java.io.ByteArrayInputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.io.StringReader;
import java.security.KeyStore;
import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.List;

import static java.nio.charset.StandardCharsets.UTF_8;
import static org.opensaml.core.xml.config.XMLObjectProviderRegistrySupport.getUnmarshallerFactory;
import static org.springframework.security.saml2.credentials.Saml2X509Credential.Saml2X509CredentialType.DECRYPTION;
import static org.springframework.security.saml2.credentials.Saml2X509Credential.Saml2X509CredentialType.SIGNING;
import static org.springframework.security.saml2.credentials.Saml2X509Credential.Saml2X509CredentialType.VERIFICATION;

@EnableWebSecurity(debug = true)
@EnableGlobalMethodSecurity(prePostEnabled = true)
class WebConfig extends WebSecurityConfigurerAdapter {

    @Autowired
    Saml2Properties saml2RelyingPartyProperties;
    Logger logger = Logger.getLogger(this.getClass().getSimpleName());

    RelyingPartyRegistration getSaml2AuthenticationConfiguration() {
        //base Url
        String baseUrl = "localhost:8080/login";
        //local registration ID
        String registrationId = "simplesamlphp";
        //remote IDP entity ID
        String idpEntityId = saml2RelyingPartyProperties.getIdentityProvider().getEntityId();
        //remote WebSSO Endpoint - Where to Send AuthNRequests to
        String webSsoEndpoint = saml2RelyingPartyProperties.getIdentityProvider().getSsoUrl();

        //local entity ID - autogenerated based on URL
        String localEntityIdTemplate = "{registrationId}";
        //local signing (and decryption key)
        Saml2X509Credential signingCredential = getSigningCredential(registrationId);
        //IDP certificate for verification of incoming messages
        Saml2X509Credential idpVerificationCertificate = getVerificationCertificate();
        String acsUrlTemplate = "{baseUrl}" + Saml2WebSsoAuthenticationFilter.DEFAULT_FILTER_PROCESSES_URI;
        return RelyingPartyRegistration.withRegistrationId(registrationId)
                .remoteIdpEntityId(idpEntityId)
                .idpWebSsoUrl(webSsoEndpoint)
                .credentials(c -> c.add(signingCredential))
                .credentials(c -> c.add(idpVerificationCertificate))
                .localEntityIdTemplate(localEntityIdTemplate)
                .assertionConsumerServiceUrlTemplate(acsUrlTemplate)
                .build();
    }

    //see: https://spring.io/blog/2018/03/01/spring-security-saml-and-this-week-s-saml-vulnerability


    public List<String> getUserGroups() throws XMLParserException, UnmarshallingException {
        List<String> groups = new ArrayList<>();
        Response response = (Response) unmarshal();
        final List<Attribute> attributes = response.getAssertions().get(0).getAttributeStatements().get(0).getAttributes();
        attributes.stream().filter(x -> x.getName().equals("groups")).findFirst().map(Attribute::getAttributeValues).ifPresent(x -> x.forEach(y -> groups.add(((XSStringImpl) y).getValue())));
        return groups;
    }

    public XMLObject unmarshal() throws UnmarshallingException, XMLParserException {
        final String s = SecurityContextHolder.getContext().getAuthentication().getCredentials().toString();

        BasicParserPool parser = new BasicParserPool();
        parser.setNamespaceAware(true);

        StringReader reader = new StringReader(s);
        Document document = parser.parse(reader);

        UnmarshallerFactory unmarshallerFactory = getUnmarshallerFactory();
        Element samlElement = document.getDocumentElement();
        final Unmarshaller unmarshaller = unmarshallerFactory.getUnmarshaller(samlElement);
        return unmarshaller.unmarshall(samlElement);
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        // @formatter:off
        http
                .authorizeRequests()
                .anyRequest().authenticated()
                .and()
                .saml2Login()
                .relyingPartyRegistrationRepository(
                        new InMemoryRelyingPartyRegistrationRepository(
                                getSaml2AuthenticationConfiguration()
                        )
                )
                .loginProcessingUrl(Saml2WebSsoAuthenticationFilter.DEFAULT_FILTER_PROCESSES_URI);
        // @formatter:on
    }

    private Saml2X509Credential getVerificationCertificate() {
        try {

             Resource keyStoreLocation = saml2RelyingPartyProperties.
                    getIdentityProvider().getVerification().getKeyStoreLocation();
            String keyStorePasswod = saml2RelyingPartyProperties.
                    getIdentityProvider().getVerification().getKeyStorePassword();
            String alias = saml2RelyingPartyProperties.
                    getIdentityProvider().getVerification().getKeyStoreAlias();

            KeyStore keyStore = KeyStore.getInstance("JKS");

            // Provide location of Java Keystore and password for access
            keyStore.load(new FileInputStream(keyStoreLocation.getFile()), keyStorePasswod.toCharArray());

            X509Certificate certificate = (X509Certificate) keyStore.getCertificate(alias);

            return new Saml2X509Credential(
                    certificate,
                    VERIFICATION
            );

        } catch (KeyStoreException | IOException | CertificateException | NoSuchAlgorithmException ex) {
            throw new RuntimeException(ex);
        }
    }

    private X509Certificate x509Certificate(String source) {
        try {
            final CertificateFactory factory = CertificateFactory.getInstance("X.509");
            return (X509Certificate) factory.generateCertificate(
                    new ByteArrayInputStream(source.getBytes(UTF_8))
            );
        } catch (Exception e) {
            throw new IllegalArgumentException(e);
        }
    }

    private Saml2X509Credential getSigningCredential(String registrationId) {
        //Certificate file location.
        final Resource certificateLocation = saml2RelyingPartyProperties.getSigning().getCertificateLocation();
        String certificate = asString(certificateLocation);

        //private key file location.
        final Resource privateKeyLocation = saml2RelyingPartyProperties.getSigning().getPrivateKeyLocation();
        String key = asString(privateKeyLocation);

        PrivateKey pk = RsaKeyConverters.pkcs8().convert(new ByteArrayInputStream(key.getBytes()));
        X509Certificate cert = x509Certificate(certificate);
        return new Saml2X509Credential(pk, cert, SIGNING, DECRYPTION);
    }

    private String asString(Resource resource) {
        try (Reader reader = new InputStreamReader(resource.getInputStream(), UTF_8)) {
            return FileCopyUtils.copyToString(reader);
        } catch (IOException ex) {
            logger.error("could not find rhe file", ex);
            throw new RuntimeException(ex);
        }
    }
}
